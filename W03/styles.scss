// COMPILE SCSS COMMAND:  sass folder/current-file-name.scss folder/new-file-name.css -w

//colors

$body-background-color: darkred;
$form-background-color: white;
$input-color: white;
$headlines-color : white;

//breakpoints
$break-small: 20em;
$break-medium: 31em;
$break-large: 60em;

body {
    background-color: $body-background-color;
    color: $input-color;  
}
//nesting
#contactform {
    background-color: $form-background-color;
    input, textarea {
        background-color: $input-color;
        flex: 2;
    }
}
//media queries nesting (the & symbol always refers to the parent selector)
#contactform {
    background-color: $form-background-color;
    input, textarea {
        background-color: $input-color;
        flex: 2;
    }
    @media (min-width: $break-small) {
       & {
          width: 90%;
          max-width: 700px;
          margin-left: auto;
          margin-right: auto; 
        } 
    }
}
//mixins
.flex-container {
    display: flex;
    flex-flow: row wrap;
}
.flex-container {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-flow: row wrap;
    -ms-flex-flow: row wrap;
    flex-flow: row wrap;
}
@mixin flex-container() {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-flow: row wrap;
    -ms-flex-flow: row wrap;
    flex-flow: row wrap;
}
fieldset > div {
    @include flex-container;        
}
//modified mixin accepts one or two arguements
@mixin flex-container($axis, $wrap: nowrap) {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-flow: $axis $wrap;
    -ms-flex-flow: $axis $wrap;
    flex-flow: $axis $wrap;
}
//modified mixin accepts one or two parameters
fieldset > div {
    @include flex-container(column);        
}
fieldset > div {
    @include flex-container(row, wrap);        
}
.center {
    width: 90%;
    max-width: 960px;
    margin-left: auto;
    margin-right: auto;
}
@mixin center {
    width: 90%;
    max-width: 960px;
    margin-left: auto;
    margin-right: auto;
}
#content {
    @include center;
}
//set breakpoint sizes with a mixin and a media query 
$break-small: 20em;
$break-medium: 31em;
$break-large: 60em;

@mixin breakpoint($break) {
@if $break == large {
@media (max-width: $break-large) { @content; }
}
@else if $break == medium {
@media (max-width: $break-medium) { @content; }
}
@else if $break == small {
@media (max-width: $break-small) { @content; }
} @else {
@media ($break) { @content; }
}
}
//apply the mixin
body {
    background: white;
    @include breakpoint(large) { background: red; }
    @include breakpoint(medium) { background: cyan; }
    @include breakpoint(small) { background: green; }
} 
